# projected Volume to mount several existing volume sources into the same directory. Currently, secret, configMap, downwardAPI, and serviceAccountToken volumes can be projected.
# secret volumes are backed by tmpfs (a RAM-backed filesystem) so they are never written to non-volatile storage.
# A container using a Secret as a subPath volume mount will not receive Secret updates.
---
# apiVersion: v1
# kind: Pod
# metadata:
#   name: test-projected-volume
# spec:
#   containers:
#     - name: test-projected-volume
#       image: busybox:1.28
#       args:
#         - sleep
#         - "86400"
#       volumeMounts:
#         - name: all-in-one
#           mountPath: "/projected-volume"
#           readOnly: true
#   volumes:
#     - name: all-in-one
#       projected:
#         sources:  # Here we used secret with file
#           - secret:
#               name: user
#           - secret:
#               name: pass

# Create files containing the username and password:
# echo -n "admin" > ./username.txt
# echo -n "1f2d1e2e67df" > ./password.txt
#
# Package these files into secrets:
# kubectl create secret generic user --from-file=./username.txt
# kubectl create secret generic pass --from-file=./password.txt
---
# Example configuration with a secret, a downwardAPI, and a configMap
# kubectl create secret generic mysecret --from-literal=username=admin

# A downwardAPI volume makes downward API data available to applications. Within the volume, you can find the exposed data as read-only files in plain text format.
# https://kubernetes.io/docs/tasks/inject-data-application/downward-api-volume-expose-pod-information/

apiVersion: v1
kind: Pod
metadata: 
  name: projected-volume-test
  labels:
    tier: backend
spec:
  containers:
    - name: redis
      image: redis
      volumeMounts:
        - name: all-in-one
          mountPath: "/projected-volume"
          readOnly: true
  volumes:
    - name: all-in-one
      projected:
        sources:
          - secret:
              name: mysecret  # created secret with --from-literal/data section
              items:
                - key: username
                  path: my-group/my-username
          
          - downwardAPI:
              items:
                - path: "labels"
                  fieldRef:
                    fieldPath: metadata.labels
                - path: "cpu_limit"
                  resourceFieldRef:
                    containerName: redis
                    resource: limits.cpu
          
          - configMap:
              name: myconfigmap
              items:
                - key: username
                  path: my-group/my-config